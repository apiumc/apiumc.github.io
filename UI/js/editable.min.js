
(function ($) {
    function colorRGB2Hex(color) {
        if (color) {
            if (color.charAt(0) == '#') return color;
            var rgb = color.split(',');
            if (rgb.length == 3) {
                var r = parseInt(rgb[0].split('(')[1]);
                var g = parseInt(rgb[1]);
                var b = parseInt(rgb[2].split(')')[0]);

                var hex = "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
                return hex;
            }
        }
        return '#000'
    }
    WDK.UI.parseCMS = (function () {
        function getStyle(n) {
            var fs = n.style['font-size'] || n.size;
            var cl = n.style['color'] || n.color;
            var align = n.style['text-align'];
            var weight = n.style['font-weight'];

            if (fs || cl || align) {
                var sl = {};
                if (fs) {
                    sl['font-size'] = Math.round(parseFloat(fs));
                }
                if (cl) {
                    sl['color'] = colorRGB2Hex(cl);
                }
                if (align) {
                    sl['text-align'] = align;
                }
                if (weight == 'bold') {
                    sl['font-weight'] = 'bold'
                }
                return sl;
            };

        }

        function appendLine(value) {
            if (value.length > 0) {
                var v = value[value.length - 1];
                if (v.charAt(v.length - 1) != '\n') {
                    value.push('\n')
                }
            }
        }
        function isLine(value) {
            if (value.length > 0) {
                var v = value[value.length - 1];
                if (v.charAt(v.length - 1) != '\n') {
                    return false;
                }
            }
            return true;
        }
        function lineMd(node, values, line) {
            var ns = node.childNodes;
            for (var i = 0; i < ns.length; i++) {
                var n = ns[i];
                switch (n.nodeType) {
                    case 3:
                        values.push(n.textContent.replace(/\n/g, line || '\n'));
                        break;
                    case 1:
                        switch (n.tagName.toLowerCase()) {
                            case 'br':
                                values.push(line || '\n');
                                break;
                            case 'a':
                                values.push('[', Trim(n.textContent), '](', n.href, ')');
                                break;
                            case 'strong':
                            case 'b':
                                values.push('**', Trim(n.textContent), '**');
                                break;
                            case 'font':
                            case 'span':
                                if (n.style.fontSize) {
                                    values.push('**', Trim(n.textContent), '**');
                                }
                                else if (n.style.color) {
                                    values.push('`', Trim(n.textContent), '`');
                                } else {
                                    values.push(Trim(n.textContent));
                                }
                                break;
                            case 'img':
                                break;
                            case 'p':
                            case 'div':
                                if (line) {
                                    if (values[values.length - 1] != line) {
                                        appendLine(values);
                                        values.push(line);
                                    }
                                    lineMd(n, values, line)
                                } else {
                                    values.push(Trim(n.textContent));
                                }
                                break;
                            default:
                                values.push(Trim(n.textContent));
                                break;
                        }
                        break;
                }
            }
        }
        function markdown(nodes, values) {
            for (var i = 0; i < nodes.length; i++) {
                var n = nodes[i];

                switch (n.nodeType) {
                    case 3:
                        var text = Trim(n.textContent);
                        text ? values.push(text) : 0;
                        break;
                    case 1:
                        switch (n.tagName.toLowerCase()) {
                            case 'img':
                                values.push('![', n.alt || '图片', '](', n.src, ')');
                                break;
                            case 'br':
                                values.push('\n');
                                break;
                            case 'div':
                                var fontsize = parseInt(n.style.fontSize) || 0;
                                var text = Trim(n.textContent);
                                switch (fontsize) {
                                    case 26:
                                        values.push('\n# ', text, '\n');
                                        break;
                                    case 24:
                                        values.push('\n## ', text, '\n');
                                        break;
                                    case 22:
                                        values.push('\n### ', text, '\n');
                                        break;
                                    case 20:
                                        values.push('\n#### ', text, '\n');
                                        break;
                                    case 18:
                                        values.push('\n##### ', text, '\n');
                                        break;
                                    default:
                                        appendLine(values);
                                        markdown(n.childNodes, values);
                                        break;
                                }
                                break;
                            case 'p':
                                appendLine(values);
                                markdown(n.childNodes, values);
                                break;
                            case 'table':
                                var rows = n.rows;
                                if (rows.length > 0) {

                                    values.push('\n|');
                                    var cs = ['|'];
                                    var cells = rows[0].cells;
                                    for (var c = 0; c < cells.length; c++) {
                                        values.push(Trim(cells[c].textContent).replace(/\n/g, '') || ' ', '|');
                                        cs.push('--|');
                                    }
                                    values.push('\n', cs.join(''));

                                    for (var i = 1; i < rows.length; i++) {
                                        values.push('\n|');
                                        var cells = rows[i].cells;
                                        for (var c = 0; c < cells.length; c++) {
                                            lineMd(cells[c], values, ' ');
                                            values.push(' |');
                                        }
                                    }
                                    values.push('\n\n');
                                    appendLine(values);
                                }
                                break;
                            case 'script':
                                break;
                            case 'blockquote':
                                appendLine(values);
                                values.push('>');
                                lineMd(n, values, '\n>')
                                break;
                            case 'pre':
                                appendLine(values);
                                values.push('``` ', n.getAttribute('data-type') || '', '\n', n.innerText);
                                appendLine(values);
                                values.push('```\n');
                                break;

                            case 'a':
                                values.push('[', Trim(n.textContent), '](', n.href, ')');
                                break;
                            case 'font':
                                values.push('`', Trim(n.textContent), '`');
                                break;
                            case 'span':
                                if (n.style.fontSize) {
                                    values.push('**', Trim(n.textContent), '**');
                                }
                                else if (n.style.color) {
                                    values.push('`', Trim(n.textContent), '`');
                                } else {
                                    values.push(Trim(n.textContent));
                                }
                                break;
                            case 'b':
                                values.push('**', Trim(n.textContent), '**');
                                break;
                            case 'strong':
                                if (n.parentNode.childNodes == 1 && isLine(values)) {
                                    values.push('\n#### ', Trim(n.textContent), '\n');

                                } else {
                                    values.push('**', Trim(n.textContent), '**');
                                }
                                break;
                            default:
                                markdown(n.childNodes, values);

                                break;
                        }
                        break;
                }
            }
        }


        function newItem(values, item, type) {
            if (item.format.length > 0) {
                values.push({
                    _CellName: type || 'CMSText',
                    format: {
                        text: item.format.join('')
                    },
                    style: item.style,
                    value: item.data
                });
                item.format = [];
                item.data = {};
                item.style = {};
            }
        }
        function Trim(str) {
            return str.replace(/(^\s*)|(\s*$)/g, "");
        }


        function doNode(nodes, values, item, isText) {
            for (var i = 0; i < nodes.length; i++) {
                var n = nodes[i];

                switch (n.nodeType) {
                    case 3:
                        var textContent = Trim(n.textContent);
                        if (textContent) {
                            var key = 'p' + item.format.length;
                            item.format.push('{', key, '}');
                            item.data[key] = n.textContent;
                        }
                        break;
                    case 1:
                        if (getComputedStyle(n, false).display == 'none') {
                            continue;
                        }
                        switch (n.tagName.toLowerCase()) {
                            case 'img':
                                if (!isText) {
                                    newItem(values, item);
                                    values.push({
                                        _CellName: 'CMSImage',
                                        value: { src: n.src }
                                    });
                                }
                                break;
                            case 'script':
                                break;
                            case 'br':
                                var key = 'p' + item.format.length;
                                item.format.push('{', key, '}');
                                item.data[key] = '\n';
                                break;
                            case 'b':
                            case 'span':
                            case 'font':
                            case 'a':
                            case 'code':
                            case 'strong':
                                if (n.childNodes.length == 1 && n.childNodes[0].nodeType == 3) {
                                    var text = n.textContent;
                                    if (Trim(text)) {
                                        var key = 'p' + item.format.length;
                                        item.format.push('{', key, '}');
                                        item.data[key] = text;
                                        var sl = getStyle(n);
                                        var href = n.href;
                                        if (href && href.indexOf('http') == 0) {
                                            if (!sl)
                                                sl = {};
                                            sl.click = {
                                                key: 'Url',
                                                send: href
                                            };
                                        }
                                        if (sl) {
                                            item.style[key] = sl;
                                        }
                                    }
                                } else {
                                    doNode(n.childNodes, values, item, isText);
                                }
                                break

                            case 'table':
                                if (!isText) {
                                    var rows = n.rows;
                                    if (rows.length > 0) {
                                        var grid = [];
                                        for (var i = 0; i < rows.length; i++) {
                                            var cells = rows[i].cells;
                                            var cels = [];
                                            for (var c = 0; c < cells.length; c++) {
                                                var cell = {};
                                                cell.format = [];
                                                cell.data = {};
                                                cell.style = {};
                                                doNode(cells[c].childNodes, [], cell, true);
                                                cell.format = cell.format.join('');
                                                cels.push(cell)
                                            }
                                            grid.push(cels);
                                        }
                                        newItem(values, item);
                                        values.push({
                                            _CellName: 'CMSGrid',
                                            value: { grid: grid }
                                        });
                                    }
                                    break;
                                }
                            case 'blockquote':
                                if (!isText) {
                                    newItem(values, item);
                                    doNode(n.childNodes, values, item, true);
                                    newItem(values, item, 'CMSRel');
                                    break;
                                }
                            case 'pre':
                                if (!isText) {
                                    newItem(values, item);
                                    item.format = ['{code}']
                                    item.data = { 'code': n.innerText || n.textContent };
                                    var preType = n.getAttribute('data-type');
                                    if (preType) {
                                        item.data.type = preType
                                    }
                                    newItem(values, item, 'CMSCode');
                                    break;
                                }
                            default:
                                if (isText) {
                                    var key = 'p' + item.format.length;
                                    item.format.push('{', key, '}');
                                    item.data[key] = n.textContent;
                                } else {
                                    newItem(values, item);
                                    item.style = getStyle(n) || {};
                                    doNode(n.childNodes, values, item);
                                }

                                break;
                        }
                        break;
                }
            }
        }

        return function (e, auto) {
            var dom = e.cloneNode(true);
            $(dom).find('pre+pre,blockquote+blockquote').each(function () {
                var p = $(this).parent();
                var pre = false;
                var vs = [];
                p.children("pre,blockquote").each(function (i) {
                    if (i == 0) {
                        pre = this;
                    } else {
                        var m = $(this);
                        var ns = this.childNodes;
                        for (var i = 0; i < ns.length; i++) {
                            pre.appendChild(document.createElement('br'))
                            pre.appendChild(ns[i]);

                        }
                        vs.push(this);
                    }
                });
                new $(vs).remove();
            });
            if (auto) {
                var values = [];
                markdown(dom.childNodes, values);
                return values.join('');
            } else {
                var texts = [];
                var item = {};
                item.format = [];
                item.data = {};
                item.style = {};
                doNode(dom.childNodes, texts, item);
                newItem(texts, item);
                return texts;
            }
        }


    })();
    function getClipboard(items) {
        var f, t, h;
        for (var i = 0; i < items.length; i++) {
            cbd = items[i];
            switch (cbd.kind) {
                case 'file':
                    return cbd;

                case 'string':
                    switch (cbd.type) {
                        case 'text/plain':
                            t = cbd;
                            break;
                        case 'text/html':
                            h = cbd;
                            break;
                    }
                    break;
            }
        }
        return h || t;

    }
    function editer(dom) {
        var ER = this;
        var descDom = $(dom);

        var textarea = descDom.siblings('textarea');
        var tool = descDom.siblings('.tool');
        var active = false;
        this.dom = descDom;
        descDom.parent().on('paste', function (e) {
            var cb = e.clipboardData;
            if (!(cb && cb.items)) {
                return;
            }
            var cbd = getClipboard(cb.items);

            switch (cbd.kind) {
                case 'file':
                    var blob = cbd.getAsFile();
                    if (blob && blob.size > 0) {
                        descDom.on('uploader', blob);
                    }
                    return false;
                case 'string':
                    if (tool.parent().is('.markdown')) {
                        return
                    }
                    switch (cbd.type) {
                        case 'text/plain': {
                            var node = window.getSelection().anchorNode;
                            var em = $(node.nodeType == 3 ? node.parentNode : node);
                            if (!em.is('div[contenteditable]')) {
                                while (!em.parent().is('div[contenteditable]')) {
                                    em = em.parent();
                                }
                                var child = em.children("pre,blockquote,table");
                                if (child.length) {
                                    cbd.getAsString(function (x) {
                                        if (child.is('table')) {
                                            document.execCommand('insertText', false, x);
                                        } else {
                                            descDom.on("innerHtml", x);
                                        }
                                    });
                                    return false;
                                }
                            }
                        }
                            break;
                        case 'text/html':
                            cbd.getAsString(function (x) {
                                var copy = $(document.createElement("div")).css({
                                    position: 'absolute',
                                    top: '-100%',
                                    right: '100%'
                                }).html(x).appendTo(document.body);
                                var text = copy[0].innerText;
                                var node = window.getSelection().anchorNode;
                                var em = $(node.nodeType == 3 ? node.parentNode : node);
                                if (!em.is('div[contenteditable]')) {
                                    while (!em.parent().is('div[contenteditable]')) {
                                        em = em.parent();
                                    }
                                    var child = em.children("pre,blockquote,table");
                                    if (child.length) {
                                        copy.remove();
                                        if (child.is('table')) {
                                            document.execCommand('insertText', false, text);
                                        } else {

                                            descDom.on("innerHtml", text);
                                        }
                                        return;
                                    }
                                }

                                var data = WDK.UI.parseCMS(copy[0]);
                                copy.remove();

                                var htmls = ["<meta charset='utf-8'>"];
                                for (var c = 0, cl = data.length; c < cl; c++) {
                                    var row = data[c];
                                    var fn = WDK.UI.Cells[row._CellName] || function () {
                                        return ''
                                    };
                                    htmls.push(fn(row.value, row.format || {}, row.style || {}));
                                }
                                document.execCommand('insertHTML', false, htmls.join(''));

                            });
                            return false;
                            break;
                    }
                    break;
            }
        });





        tool.find('.el-editer-html-view').click(function () {
            var pdom = tool.parent();
            if (pdom.is('.markdown')) {
                var blob = new Blob([textarea.val()]);
                blob.name = 'view.md';
                var m = $(this);
                m.addClass('loading')
                WDK.uploader(blob, function (xhr) {
                    WDK.UI.API('Subject', 'View', { Url: xhr.src, start: 0 }, d => {
                        pdom.removeClass('markdown');
                        m.removeClass('loading');
                        ER.Values(d.DataSource[1].data);
                        descDom.on('input');
                    });
                }, false, true);

            } else {
                WDK.UI.Confirm('提示', '图文转化Markdown会丢失一此格式，确认转换吗', function (v) {
                    textarea.val(WDK.UI.parseCMS(descDom[0], true));
                    pdom.addClass('markdown');
                    textarea.on('input');
                });
            }
        });
        var markdowns = [
            "\uf0c1"
            , "\uf0ce"
            , "\uf120"
            , "\uf121"
            , "\uf10d"
            , "\uf032"
            , "\uf0cc"
            , "\uf0cd"
            , "H1"
            , "H2"
            , "H3"
            , "H4"];

        var mtitles = ["连接如果上传非图片，则展示连接",
            "表格",
            "高亮",
            "程序代码",
            "引用",
            "加粗",
            "删除线",
            "下划线",
            "一级标题",
            "二级标题",
            "三级标题",
            "四级标题"];
        for (var i = 0; i < markdowns.length; i++) {
            var a = WDK(document.createElement('a'));
            a.attr('data-icon', markdowns[i]);
            a.attr('data-index', i + '');
            a.attr('title', mtitles[i]);
            tool.append(a);
            a.addClass('markdown-icon')

        }

        var colors = ["#fb2b2e", "#ffbe00", "#46cc47", "#00aaef", "#3e56ea", "#a45ee0"].reverse();
        var cem = tool.find('.cssColor');
        for (var i = 0; i < colors.length; i++) {

            var a = WDK(document.createElement('a'));
            a.attr('data-value', colors[i]);
            a.css('color', colors[i]);
            a.addClass('font-color');
            cem.after(a);
        }
        cem.remove();
        tool.find('.markdown-icon').on('mousedown', function (e) {
            e.preventDefault();
            textarea.on('input');
            var m = $(this);
            switch (parseInt(m.attr('data-index')) || 0) {
                case 0:
                    link(textarea[0]);
                    break;
                case 1:
                    grid(textarea[0]);
                    break;
                case 2:
                    font(textarea[0], "`");
                    break;
                case 3:
                    font(textarea[0], "\n```\n");
                    break
                case 4:
                    caption(textarea[0], ">");
                    break;
                case 5: {

                    font(textarea[0], "**");
                }
                    break;
                case 6: {
                    font(textarea[0], "~~");
                }
                    break;
                case 7: {

                    font(textarea[0], "~");
                }
                    break;
                case 8:
                    caption(textarea[0], "# ");

                    break;
                case 9:
                    caption(textarea[0], "## ");
                    break;
                case 10:
                    caption(textarea[0], "### ");
                    break;
                case 11:
                    caption(textarea[0], "#### ");
                    break;
            }

        });
        var titleTimeId = 0;

        descDom.on('click', function (e) {
            var em = e.target;
            if (em == descDom[0]) {
                return;
            }
            var pem = em;
            while (pem.parentNode != descDom[0]) {
                pem = pem.parentNode;
            }
            if (pem.contentEditable == 'false')
                return;


            active = $(em);
            while (em.parent)
                active = $(em);

            tool.find('input[type=range]').val(parseInt(active.css('font-size')));


            return false;
        }).on('click', '.wdk-cms-grid table td', function (e) {
            var em = $(this);
            var offset = em.offset();
            var min = offset.height / 2;
            if (em.is('table tr:first-child td:first-child')) {

                if (e.x < offset.left + min && e.y < offset.top + min) {
                    var rows = em.parent("table")[0].rows;
                    var cs = [];
                    for (var i = 0; i < rows.length; i++) {

                        var cells = rows[i].cells;
                        if (cells.length > 2) {
                            var cel = $(cells[cells.length - 1]);
                            if (!cel.text().replace(/\s+/g, '')) {
                                cs.push(cel[0]);
                            } else {
                                $.UI.Msg('单元格有数据不能移除')
                                return;
                            }
                        } else {
                            $.UI.Msg('不能少于4个单元格')
                            return;
                        }
                    }
                    new WDK(cs).remove();
                }

            } else if (em.is('table tr:first-child td:last-child')) {
                if (e.x > offset.left + offset.width - min && e.y < offset.top + min) {
                    var rows = em.parent("table")[0].rows;
                    for (var i = 0; i < rows.length; i++) {
                        rows[i].insertCell(-1);
                    }
                }
            } else if (em.is('table tr:last-child td:first-child')) {
                if (e.x < offset.left + min && e.y > offset.top + min) {
                    var rows = em.parent("table")[0].rows;
                    if (rows.length > 2) {
                        var row = $(rows[rows.length - 1]);
                        if (row.text().replace(/\s+/g, '')) {
                            $.UI.Msg('行格中有数据不能移除')
                        } else {
                            row.remove();
                        }
                    } else {
                        $.UI.Msg('不能少于4个单元格')
                    }
                }
            } else if (em.is('table tr:last-child td:last-child')) {
                if (e.x > offset.left + offset.width - min && e.y > offset.top + min) {

                    var t = em.parent("table")[0];
                    var l = t.rows[0].cells.length;
                    var tr = t.insertRow(-1)
                    for (var i = 0; i < l; i++) {
                        tr.insertCell(-1);
                    }
                }

            }
        }).on('innerHtml', function (e, text) {
            document.execCommand('insertHTML', false, '<p>' + text + '</p>');
            var p = $(window.getSelection().anchorNode.parentNode);
            if (!p.is('p')) {
                var c = document.createElement('p');
                c.innerText = text;
                p.parent()[0].replaceChild(c, p[0]);
            }
        }).on('uploader', function (e, file) {
            $.uploader(file, function (xhr) {
                $.UI.Command('System', 'Resource', { Key: xhr.key }, function (t) {

                    var filename = t.src.substring(t.src.lastIndexOf('/') + 1);

                    var nindex = filename.lastIndexOf('.');
                    if (nindex == -1) return;
                    var name = filename.substring(0, nindex);
                    var ename = filename.substring(nindex);

                    var pdom = tool.parent();

                    switch (ename.toLowerCase()) {
                        case '.gif':
                        case '.png':
                        case '.jpg':
                        case '.jpeg':
                            if (pdom.is('.markdown')) {
                                insertText(textarea[0], ['![', name, '](', t.src, ')'].join(''));
                                textarea.on('input');
                            } else {
                                var html = ['<div class="wdk-cms-image"><img src="', t.src, '"></div>'].join('');
                                var node = window.getSelection().anchorNode;
                                if (isCom(node)) {
                                    var active = $(node.nodeType == 3 ? node.parentNode : node);
                                    while (!active.parent().is('div[contenteditable]')) {
                                        active = active.parent();
                                    }

                                    if (active.find('pre,blockquote,img').length) {
                                        active.after(html);
                                    } else {
                                        document.execCommand('insertHTML', false, html);
                                    }

                                } else {
                                    descDom.append(html)
                                }
                                descDom.on('input');
                            }
                            break;
                        default:
                            if (pdom.is('.markdown')) {
                                link(textarea[0], filename, t.src);
                                textarea.on('input');
                            } else {
                                var html = ['<a title="', t.src, '" href="', t.src, '">', filename, '</a>'].join('');
                                var node = window.getSelection().anchorNode;
                                if (isCom(node)) {
                                    var active = $(node.nodeType == 3 ? node.parentNode : node);
                                    while (!active.parent().is('div[contenteditable]')) {
                                        active = active.parent();
                                    }

                                    if (active.find('pre,img,table').length) {
                                        active.after(['<div class="wdk-cms-text">', html, '</div>'].join(''));
                                    } else {
                                        document.execCommand('insertHTML', false, html);
                                    }

                                } else {
                                    descDom.append(['<div class="wdk-cms-text">', html, '</div>'].join(''));
                                }
                                descDom.on('input');
                            }
                            break;
                    }
                });
            });

        }).on('keydown', function (e) {
            switch (e.keyCode) {
                case 13:
                    var isb = true;
                    Check(function (x) {
                        isb = !x.is('.wdk-cms-grid')

                    });
                    return isb;
                    break;
                case 27:
                    Check(function (x) {
                        if (x.is('.wdk-cms-grid')) {
                            if (!x.text().replace(/\s+/g, '')) {
                                x.remove();
                                return;
                            }
                        }
                        var ch = x.children("pre,blockquote");
                        if (ch.length) {
                            var node = window.getSelection().anchorNode;
                            var p = $(node.nodeType == 3 ? node.parentNode : node);
                            if (!p.is('pre,blockquote')) p = p.parent('pre,blockquote');

                            var after = document.createElement('div');
                            after.className = 'wdk-cms-text';
                            var c = false;
                            ch.each(function () {
                                if (this == p[0]) {
                                    c = true;
                                } else if (c) {
                                    after.appendChild(this);
                                }
                            });
                            var cur = document.createElement('div');
                            cur.className = 'wdk-cms-text';
                            var chs = p[0].childNodes;

                            for (var i = 0; i < chs.length; i++) {
                                cur.appendChild(chs[i]);
                            }
                            p.remove();
                            x.after(cur);
                            if (after.childNodes.length)
                                $(cur).after(after);
                            if (!x.children().length) {
                                x.remove();

                            }

                            var r = document.createRange();
                            r.selectNode(cur.childNodes[0]);
                            window.getSelection().removeAllRanges();
                            window.getSelection().addRange(r);

                        }

                    })
                    break;
            }
        }).on('input', function (e) {
            switch (e.inputType) {
                case 'deleteContentBackward':
                    var node = window.getSelection().anchorNode;
                    var next = node.nextElementSibling || (node.parentNode.nextElementSibling)
                    if (next && next.nodeType == 1) {
                        $(next).attr('style', 0)
                    }
                    break;
                case 'insertText':
                    switch (e.data) {
                        case '#':
                            Check(function (x) {
                                if (!x.children("pre,blockquote").length) {
                                    clearTimeout(titleTimeId);
                                    if (x.text().indexOf('#') == 0) {
                                        titleTimeId = setTimeout(function () {
                                            var text = x.text();
                                            var fontSize = 0;

                                            for (var i = 1; i < text.length; i++) {
                                                if (text.charAt(i) == '#') {
                                                    fontSize++;
                                                } else {
                                                    break;
                                                }
                                            }
                                            x.text(text.substring(fontSize + 1)).attr('style', 0).css('font-size', (26 - (fontSize * 2)) + 'px')
                                                .css('font-weight', 'bold')
                                        }, 1000);
                                    }
                                }
                            });
                            break;
                        case '`':
                            Check(function (x) {
                                if (x.text().indexOf('```') == 0) {
                                    if (!x.children("pre,blockquote").length) {
                                        var em = x[0];
                                        var text = em.innerText.substring(3);

                                        var d = document.createElement("pre");
                                        d.innerText = text || ' ';
                                        x.html('').append(d);

                                        x.attr('style', 0)[0].className = 'wdk-cms-text';
                                    }

                                }
                            })
                            break;
                        case '>':
                            Check(function (x) {
                                var r = x[0].childNodes[0];
                                if ((r.nodeValue || r.innerText).indexOf('>') == 0) {
                                    if (!x.children("pre,blockquote").length) {
                                        if (r.nodeValue) {
                                            r.nodeValue = r.nodeValue.substring(1);
                                        } else {
                                            r.innerText = r.innerText.substring(1);
                                        }
                                        x.html(['<blockquote>', x.html() || ' ', '</blockquote>'].join(''))

                                        x.attr('style', 0)[0].className = 'wdk-cms-text';
                                    }

                                }
                            })
                            break;
                    }
                    break;
                case 'insertParagraph':

                    Check(function (em) {
                        if (!em.children("pre,blockquote,table").length) {
                            em.text(em.text()).attr('style', 0)[0].className = 'wdk-cms-text';
                        }
                    }, true, function (x) {
                        x[0].className = 'wdk-cms-image';

                        var n = $(window.getSelection().anchorNode);
                        if (!n.find('img').length) {
                            if (n.parent().is('.wdk-cms-image')) {
                                n.attr('style', 0)[0].className = 'wdk-cms-text';
                                x.after(n);
                            }
                        }
                    })
                    break;
            }
        })

        function isCom(em) {
            var root = descDom[0];
            var pem = em;
            if (pem == root) {
                return false;
            }
            while (pem.parentNode && pem.parentNode != root) {
                pem = pem.parentNode;
            }
            return pem.parentNode == root;
        }

        tool.find('a[data-name]').on('mousedown', function (e) {
            e.preventDefault();
            var m = $(this);

            Check(function (active) {
                var name = m.attr('data-name');
                var v = m.attr('value');
                var em = active[0];
                em.className = 'wdk-cms-text'
                var val = em.style[name];
                active.css(name, v == 'left' ? false : (val == v ? false : v))
                    .find("*").css(name, false);
                switch (m.attr('data-icon')) {
                    case 'H1':
                    case 'H2':
                    case 'H3':
                    case 'H4':
                    case 'H5':
                        active.css('font-weight', (val == v ? false : 'bold'))
                        break;
                }
                descDom.on('input');
            });
        });
        tool.find('a.anthor').on('mousedown', function (e) {
            e.preventDefault();
            var selection = window.getSelection();
            var range = selection.getRangeAt(selection.rangeCount - 1);
            Check(function (active) {
                if (active.children('pre').length > 0) return;
                if (range.startOffset == range.endOffset) {
                    var pe = range.startContainer.parentNode;
                    var em = $(pe);
                    if (em.is('a')) {
                        var tnode = document.createTextNode(em.text());
                        pe.parentNode.replaceChild(tnode, pe);
                        var r = document.createRange();
                        r.selectNode(pe);
                        document.getSelection().removeAllRanges();
                        document.getSelection().addRange(r);
                    }
                } else {
                    document.execCommand('createLink', false, selection.toString());
                }
                descDom.on('input');
            });
        });
        function Check(fn, c, img) {
            var node = window.getSelection().anchorNode;
            if (!c && isCom(node) == false) {
                return;
            }
            var active = $(node.nodeType == 3 ? node.parentNode : node);
            while (!active.parent().is('div[contenteditable]')) {
                active = active.parent();
            }

            if (active.find('img').length) return img ? img(active) : 0;
            fn(active);
        }

        tool.find('.at_icon').on('mousedown', function (e) {
            e.preventDefault();


            var dataKey = $(this).attr('data-key');
            Check(function (active) {
                if (dataKey == 'grid') {

                    var em = document.createElement("div");

                    $(em).addClass('wdk-cms-grid').html('<table><tr><td></td><td></td></tr><tr><td></td><td></td></tr></table>');//, '<', dataKey, '>'].join(''))
                    active.after(em);
                    return;
                }
                if (active.children('table').length) {
                    var em = document.createElement("div");
                    $(em).addClass('wdk-cms-text').html(['<', dataKey, '><br>', '<', dataKey, '>'].join(''))
                    active.after(em);
                    var range = document.createRange();
                    range.selectNode(em);
                    range.selectNodeContents(em);
                    range.collapse(true)
                    window.getSelection().removeAllRanges();
                    window.getSelection().addRange(range);
                } else {


                    var em = active[0];
                    em.className = 'wdk-cms-text'
                    switch (dataKey) {
                        case "blockquote":
                        case 'pre':
                            var es = active.children('blockquote,pre');
                            if (es.length) {
                                var m = es.eq(dataKey);
                                var childNodes = es[0].childNodes;
                                for (var i = 0; i < childNodes.length; i++) {
                                    em.appendChild(childNodes[i]);
                                }
                            }
                            es.remove();
                            if (!es.is(dataKey)) {
                                var nem = $(document.createElement(dataKey));
                                dataKey == "pre" ?
                                    nem.text(em.innerText).appendTo(active.html('')) :
                                    nem.html(active.html()).appendTo(active.html(''));
                            }
                            var r = document.createRange();
                            r.selectNode(em.childNodes[0]);
                            window.getSelection().removeAllRanges();
                            window.getSelection().addRange(r);

                            break;
                    }
                }
                descDom.on('input');
            })
        });
        tool.find('.font-color').on('mousedown', function (e) {
            e.preventDefault();
            var selection = window.getSelection();
            var range = selection.getRangeAt(selection.rangeCount - 1);
            var color = $(this).attr('data-value');
            Check(function (active) {
                if (active.children('pre').length > 0) return;
                if (range.startOffset == range.endOffset) {
                    var pe = range.startContainer.parentNode;
                    if (pe == descDom[0]) {
                        return;
                    }
                    var em = $(pe);
                    if (!pe.childElementCount && em.is('div') == false) {
                        if (colorRGB2Hex(em.css('color')) == color) {
                            pe.parentNode.replaceChild(document.createTextNode(em.text()), pe);
                            return;
                        }
                    }
                    em.css('color', colorRGB2Hex(em.css('color')) == color ? false : color).find('*')
                        .css('color', false)

                } else {
                    document.execCommand('ForeColor', false, color);
                    $(selection.anchorNode.parentNode).attr('color', false).css('color', color).find('*')
                        .css('color', false)

                }

                descDom.on('input');
            });
            return false;

        });

        tool.find('input').on('change', function () {
            switch (this.type) {
                case 'file':
                    if (this.files.length > 0) {
                        descDom.on('uploader', this.files[0]);
                    }
                    break;
                case 'range':
                    var v = this.value;
                    Check(function (active) {
                        if (active.children('pre').length > 0) return;
                        document.execCommand("fontSize", false, "1");
                        $(window.getSelection().anchorNode.parentNode).attr('size', false).css('font-size', (v) + 'px')
                            .find("*").css('font-size', false);

                        descDom.on('input');
                    });
                    break;
            }
        });

    }
    function link(editText, slt, href) {
        var start = editText.selectionStart;
        var end = editText.selectionEnd;
        var sel = slt || "连接";
        var text = editText.value;
        if (start < end) {
            sel = text.substring(start, end);
        }
        var hr = href || 'href';


        insertText(editText, ['[', sel, '](', hr, ')'].join(''));
        var estart = start + 3 + sel.length;
        editText.selectionStart = estart;
        editText.selectionEnd = estart + hr.length;
    }
    function insertText(editText, str) {
        if (typeof document.selection != "undefined") {
            document.execCommand('insertText', false, str);
        } else {
            var start = editText.selectionStart;
            var end = editText.selectionEnd;
            var value = editText.value;
            editText.value = value.substring(0, start) + str + value.substring(end);


        }
    }
    function grid(editText) {
        var start = editText.selectionStart;


        insertText(editText,
            "\n| head1| head2 | head3 |\n|--|--|--|\n|item1 | item2 | item3 |\n");


        editText.selectionStart = start + 2;
        editText.selectionEnd = start + 8;

    }
    function caption(editText, t) {
        var start = editText.selectionStart;
        var end = editText.selectionEnd;
        var text = editText.value;

        var newstart = text.substring(0, start).lastIndexOf('\n') + 1;

        var entStart = text.indexOf('\n', end);

        var sel = "";
        if (entStart == -1) {
            sel = text.substring(newstart);
            entStart = text.length;
        } else {
            sel = text.substring(newstart, entStart);
        }

        editText.selectionStart = newstart;
        editText.selectionEnd = entStart;
        if (sel.startsWith(t)) {
            sel = sel.substring(t.length);
            insertText(editText, sel);
            editText.selectionStart = newstart;
            editText.selectionEnd = newstart + sel.length;



        } else {
            while (sel.startsWith("#")) {
                sel = sel.substring(1);
            }


            sel = sel.trim();

            insertText(editText, t + sel);
            start = newstart + t.length;
            editText.selectionStart = start;
            editText.selectionEnd = start + sel.length;


        }
    }

    function font(editText, t) {
        var start = editText.selectionStart;
        var end = editText.selectionEnd;
        var text = editText.value;
        var isHave = false;
        if (start - t.length > -1 && (end + t.length <= text.length)) {

            if (text.substring(start - t.length, start) == (t) &&
                text.substring(end, end + t.length) == (t)) {
                isHave = true;
            }

        }
        var sel = "";
        if (start < end) {
            sel = text.substring(start, end);
        }
        if (isHave) {
            editText.selectionStart = start - t.length;
            editText.selectionEnd = end + t.length;

            insertText(editText, sel);
            editText.selectionStart = start - t.length;
            editText.selectionEnd = start - t.length + sel.length;

        } else {

            insertText(editText, t + sel + t);
            editText.selectionStart = start + t.length;
            editText.selectionEnd = start + t.length + sel.length;


        }
    }

    editer.prototype = {
        Values: function (x) {
            var data = x instanceof Array ? x : (JSON.parse(x || '[]') || []);
            var htmls = [];
            for (var c = 0, cl = data.length; c < cl; c++) {
                var row = data[c];
                var fn = WDK.UI.Cells[row._CellName] || function () {
                    return ''
                };
                htmls.push(fn(row.value, row.format || {}, row.style || {}));
            }
            this.dom.html(htmls.join('')).find('a.wdk-cms-image').each(function () {
                var m = document.createElement('div');
                m.className = 'wdk-cms-image';
                m.innerHTML = this.innerHTML;
                this.parentNode.replaceChild(m, this);
            })
        },
        Markdown: function () {

            if (arguments.length) {
                this.dom.siblings('textarea').val(arguments[0]).parent().addClass('markdown');

                this.dom.html('');
            } else {
                return this.dom.siblings('textarea').val();
            }
        },
        Value: function () {
            if (arguments.length) {
                var html = arguments[0] || '';
                this.dom.html(html).find('a.wdk-cms-image').each(function () {
                    var m = document.createElement('div');
                    m.className = 'wdk-cms-image';
                    m.innerHTML = this.innerHTML;
                    this.parentNode.replaceChild(m, this);
                });
                var em = this.dom[0];
                var nodes = em.childNodes;
                for (var i = 0; i < nodes.length; i++) {
                    var n = nodes[i];
                    switch (n.nodeType) {
                        case 3:
                            var nw = document.createElement("div");
                            nw.innerHTML = n.textContent;
                            em.replaceChild(nw, n);
                            break;
                    }
                }
                this.dom.siblings('textarea').val('').parent().removeClass('markdown');
            } else {

                var pdom = this.dom.parent();
                if (pdom.is('.markdown')) {
                    return { markdown: this.dom.siblings('textarea').val() };
                } else {
                    var texts = UMC.UI.parseCMS(this.dom[0]);
                    return { html: this.dom.html(), list: texts };
                }
            }
        }
    }

    WDK.UI.Editable = function (dom) {
        var m = $(dom)[0];
        if (m) {
            var e = m._$;
            if (!e) {
                m._$ = new editer(m);
            }
            return m._$;
        }
    }
})(WDK);